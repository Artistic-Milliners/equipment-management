# Generated by Django 3.2.15 on 2023-03-09 08:19

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contractor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contractor', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Designation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('designation_name', models.CharField(default='Trainee', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('department', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='core.department')),
                ('designation', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='core.designation')),
            ],
        ),
        migrations.CreateModel(
            name='Equipment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('quantity', models.IntegerField()),
                ('contractor', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.contractor')),
            ],
        ),
        migrations.CreateModel(
            name='IssueList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('error_code', models.CharField(default=None, max_length=35, null=True)),
                ('programmer_string', models.CharField(default=None, max_length=100, null=True)),
                ('machine_string', models.CharField(default=None, max_length=100, null=True)),
                ('c_desc', models.TextField(default='EMPTY', verbose_name='code description')),
                ('effect', models.TextField(blank=True, max_length=250, null=True)),
                ('machine_status', models.CharField(blank=True, max_length=250, null=True)),
                ('restart_procedure', models.TextField(blank=True, max_length=500, null=True)),
                ('flashes', models.IntegerField(blank=True, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images')),
                ('equipment', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='equipment', to='core.equipment')),
            ],
        ),
        migrations.CreateModel(
            name='Manufacturer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('coo', models.CharField(max_length=100, null=True, verbose_name='country of origin')),
            ],
        ),
        migrations.CreateModel(
            name='Spares',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('item_code', models.CharField(blank=True, max_length=30, null=True)),
                ('name', models.CharField(max_length=255)),
                ('quantity', models.IntegerField()),
                ('unit', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Machines',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('dop', models.DateField(blank=True, null=True, verbose_name='Date of Purcahse')),
                ('purchase_cost', models.FloatField(default=0)),
                ('model', models.CharField(blank=True, max_length=50, null=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images')),
                ('spares', models.ManyToManyField(blank=True, related_name='machines', to='core.Spares')),
                ('type_of_machine', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='typeOfMachine', to='core.equipment')),
            ],
        ),
        migrations.CreateModel(
            name='MachineIssue',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('machine_hours', models.IntegerField(blank=True, null=True)),
                ('description', models.TextField(blank=True, default='EMPTY', null=True)),
                ('Images', models.ImageField(upload_to='images')),
                ('date_time', models.DateTimeField(auto_now=True)),
                ('priority', models.CharField(choices=[('HIGH', 1), ('MODERATE', 2), ('LOW', 3)], default=1, max_length=50)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed'), ('IN_PROGRESS', 'In Progress')], default='Pending', max_length=50)),
                ('code', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.issuelist')),
                ('machine', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, to='core.machines')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='core.employee')),
            ],
        ),
        migrations.CreateModel(
            name='IssueResolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_started', models.DateTimeField(auto_now=True)),
                ('date_ended', models.DateTimeField(blank=True, null=True)),
                ('remarks', models.TextField(default='EMPTY')),
                ('contractor', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='resolved_issues', to='core.contractor')),
                ('employee', models.ForeignKey(default=None, on_delete=django.db.models.deletion.PROTECT, related_name='employee', to='core.employee')),
                ('issue', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='core.machineissue')),
            ],
        ),
        migrations.AddField(
            model_name='equipment',
            name='manufacturer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='core.manufacturer'),
        ),
        migrations.CreateModel(
            name='Contractor_Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('visiting_person', models.CharField(max_length=255)),
                ('contractor_name', models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='core.contractor')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_employee', models.BooleanField(default=False)),
                ('is_contractor', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
